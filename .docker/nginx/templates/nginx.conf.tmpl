# @author Marcos Freitas
# @author Yuri Koster
# @version 2.0.0 - Based on Infrastructure Manual Document - Nginx + PHP 7.x
#
# @changelog
# 2.1.0 - Changed files to accept ENVIROMENT keys to use in templates
# 2.0.0 - Added initial inbound proxy configurations to NGINX act as a proxy server too and separated http server directives into a snippet
# 1.1.0 - Added snippet instructions to do custom redirect.
#
# @info some @features are disabled but can be used normaly
# @experimental things should not be enabled at production servers yet
# @todo have pendent tasks

# the following configuration snippet implements a 1‑second caching period for responses with a 200 OK status code.
fastcgi_cache_path /tmp/cache keys_zone=APPLICATION:10m levels=1:2 inactive=60m max_size=500m use_temp_path=off;


server {
	listen {{  .Env.NGINX_PORT }} default_server;
	listen [::]:{{  .Env.NGINX_PORT }} default_server;

	root {{  .Env.NGINX_ROOT }};

	server_name {{  .Env.NGINX_HOST }};

	# to SSL permanent redirect for all request on port 80
	#server_name _;
	#return 301 https://$host$request_uri;

	# load general security configurations
	# @info part of server block
    # @todo change the name of this file

    # Disable show nginx version
    server_tokens off;

    # removing php header
    fastcgi_hide_header X-Powered-By;

    # Avoid clickjacking
    add_header X-Frame-Options SAMEORIGIN;

    # Disable content-type sniffing on some browsers
    add_header X-Content-Type-Options nosniff;

    # Enable the Cross-site scripting (XSS) filter
    add_header X-XSS-Protection "1; mode=block";

    # Disable directory listing
    autoindex off;

    # Set cookies secure
    #set_cookie_flag HttpOnly secure;

    # Enable CORS
    add_header Access-Control-Allow-Origin '*';

    # By removing the ETag header, you disable caches and browsers from being able to validate files,
    # so they are forced to rely on your Cache-Control and Expires header.
    # Basically you can remove If-Modified-Since and If-None-Match requests and their 304 Not Modified Responses.
    etag off;

    # Performance configuration
	set $skip_cache 0;

    # POST requests and urls with a query string should always go to PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }
    if ($query_string != "") {
        set $skip_cache 1;
    }

    # "punching a hole" through the cache
    # To support Pragma: no-cache sent by clients and force touch the resource without cache
    # and Acessible as http://www.example.com/?nocache=true
    fastcgi_cache_bypass $skip_cache $http_pragma $cookie_nocache $arg_nocache;
    fastcgi_no_cache $skip_cache;

    # https://www.nginx.com/blog/nginx-caching-guide/#proxy_cache_path
    add_header X-Cache-Status $upstream_cache_status;

    # @info using predefined keys_zone at app.conf
    fastcgi_cache APPLICATION;

    fastcgi_cache_revalidate on;

    # 200 301 302 statuses are cached by 1 minute
    fastcgi_cache_valid 1m;
    # 404 status
    fastcgi_cache_valid 404 5s;

    # delivering Cached Content When the Origin is Down
    fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503;
    fastcgi_cache_background_update on;

    # only one request at a time will be allowed to populate a new cache element
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_lock on;

    # add header to show if the response is cached
    add_header rt-Fastcgi-Cache $upstream_cache_status;
	# Start: Size Limits and Buffer Overflows
    client_body_buffer_size  2K;
    client_header_buffer_size 2k;

    # -- control for posts/upload
    # should be equal to fastcgi param
    client_max_body_size 80M;

    large_client_header_buffers 4 16k;

    # Start: Timeouts
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    client_body_timeout   10;
    client_header_timeout 10;
    keepalive_timeout     0;
    send_timeout          2;
    fastcgi_read_timeout 60;

    # Gzip Compression
    # disabled because use of ssl
    gzip             on;
    gzip_comp_level  2;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    gzip_types text/plain text/xml text/css application/json application/javascript application/xml application/xml+rss;


    # Static file caching
    location ~* .(js|json)$ {
        # Indicate that the resource may be cached by public caches like web caches for instance,
        # if set to 'private' the resource may only be cached by client's browser.
        add_header Cache-Control public;
        # Indicate that the resource can be cached for 24 hours
        expires 24h;
    }

    location ~* .(css)$ {
        add_header Cache-Control public;
        # Equivalent to above:
        # Indicate that the resource can be cached for 86400 seconds (24 hours)
        expires 86400;

        # Add an ETag header with an identifier that can be stored by the client
        etag on;
    }

    location ~* \.(?:ico|gif|jpe?g|png|svg|woff|woff22|ttf)$  {
        add_header Cache-Control public;
        expires 30d;
        # Indicate that the browser can serve a compressed version of these resources
        add_header Vary Accept-Encoding;
        # Indicate that the resource must be revalidated at each access
        add_header Cache-Control must-revalidate;
        access_log off;
        etag on;
        # Set the OS file cache.
        open_file_cache max=3000 inactive=120s;
        open_file_cache_valid 60s;
        open_file_cache_min_uses 2;
        open_file_cache_errors off;
    }

    # medium downloadable files that can be sent directly without be copied to buffer
    location ~* .(mp3|mp4|pdf)$ {
        sendfile on;
        sendfile_max_chunk 80m;
    }

	# base configurations of virtual host
	# main files to serve
    index index.php index.html;

    location / {

        allow all;

        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        #try_files $uri $uri/ =404;
        try_files $uri $uri/ /index.php?$query_string;

        # Set CSP Rules
        # https://content-security-policy.com/
        # ajusta o conjunto de domínios permitidos para carregamento de scripts externos
        # aplica os métodos aceitos para aplicar estilos e executar scripts no site
        # add_header Content-Security-Policy default-src 'self' data: 'unsafe-inline' 'unsafe-eval' *.googleapis.com *.gstatic.com *google-analytics.com

    }

    # pass PHP scripts to FastCGI server

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        # @changelog
        # increased memory_limit directive
        fastcgi_param PHP_VALUE "memory_limit=512M;\n allow_url_fopen=on;\n file_uploads=on;\n upload_tmp_dir=\"/tmp\";\n upload_max_filesize=80M;\n post_max_size=80M;\n max_execution_time=600;\n max_input_time=600;\n session.cookie_httponly=on;\n display_startup_errors=off;\n display_errors=off;\n html_errors=off;\n error_reporting=on;\n log_errors=on;\n error_log=\"/var/log/nginx/php_error.log\";";

        # With php-fpm (or other unix sockets):
        fastcgi_pass {{  .Env.PHP_SERVICE_NAME }}:{{  .Env.PHP_SERVICE_PORT }};

        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index index.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one

    location ~ /\.ht {
        deny all;
    }

    # disallow the access to all files and folders with dot at the beginning
    location ~ /\.(?!well-known\/) {
        deny all;
    }

}